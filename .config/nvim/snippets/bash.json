{
  "bang": {
    "prefix": ["bang", "#!", "shebang"],
    "body": "#!/usr/bin/env bash\n",
    "description": ["shebang: bash"]
  },
  "strict": {
    "prefix": ["strict"],
    "body": [
      "#!/usr/bin/env",
      "set -euo pipefail",
      "IFS=\\$'\\n\\t'"
    ]
  },
  "null": {
    "prefix": ["null"],
    "body": [">/dev/null 2>&1"]
  },
  "trap": {
    "prefix": "trap",
    "body": "trap 'echo exit && exit 1' HUP INT QUIT TERM"
  },
  "default2": {
    "prefix": "default2",
    "body": "\\${${1:parameter}-${2:default}}",
    "description": "set if unset"
  },
  "default": {
    "prefix": "default",
    "body": "\\${${1:parameter}:-${2:default}}",
    "description": "set if unset || zero"
  },
  "if": {
    "prefix": "if",
    "body": "if [[ ${0:condition} ]]; then\n\t${1}\nfi",
    "description": "An IF statement."
  },
  "elseif": {
    "prefix": "elseif",
    "body": "elif [[ ${0:condition} ]]; then\n\t${1}",
    "description": "Add an elseif to an if statement."
  },
  "else": {
    "prefix": "else",
    "body": "else\n\t${0:command}",
    "description": "else"
  },
  "for_in": {
    "prefix": "for_in",
    "body": "for ${0:VAR} in $${1:LIST}\ndo\n\techo \"$${0:VAR}\"\ndone\n",
    "description": "for loop in list"
  },
  "for_i": {
    "prefix": "for_i",
    "body": "for ((${0:i} = 0; ${0:i} < ${1:10}; ${0:i}++)); do\n\techo \"$${0:i}\"\ndone\n",
    "description": "An index-based iteration for loop."
  },
  "while": {
    "prefix": "while",
    "body": "while [[ ${1:condition} ]]; do\n\t${0}\ndone\n",
    "description": "A while loop by condition."
  },
  "until": {
    "prefix": "until",
    "body": "until [[ ${1:condition} ]]; do\n\t${0}\ndone\n",
    "description": "until loop by condition"
  },
  "function": {
    "prefix": "function",
    "body": "${1:name} ()\n{\n\t${0}\n}",
    "description": [
      "This defines a function named name.\n",
      "The reserved word function is optional.\n",
      "If the function reserved word is supplied, the parentheses are optional.\n",
      "1. Recommended way:\n",
      "name() {}\n",
      "2. C-like-way:\nfunction name [()] {}"
    ]
  },
  "case": {
    "prefix": ["case", "switch"],
    "body": [
      "case ${1} in",
      "val)",
      "  echo \"\"",
      "  ;;",
      "*)",
      "  echo \"no match\"",
      "  ;;",
      "esac"
    ]
  }
}