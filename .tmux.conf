# vim:set et sw=2 ft=tmux foldmethod=expr foldexpr=getline(v\:lnum)=~'Section\:'?'>1'\:'=':

# https://gist.github.com/yudai/95b20e3da66df1b066531997f982b57b
# https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
# https://github.com/tmux/tmux/wiki/Clipboard

# Section: keys
unbind-key C-b
set -g prefix C-Space
set -g mode-keys vi

# move with <;>,<'>
bind-key -r "'" next-window
bind-key -r \; previous-window

# zen(only)
# bind-key o set status\; resize-pane -Z \;
# bind-key -n C-z resize-pane -Z \;
# toggle status
# bind-key z set status\; resize-pane -Z\;

bind-key BSpace last-window
# bind-key Tab last-pane

bind-key x kill-pane # kill
bind-key X kill-window
# bind-key = select-layout even-horizontal
# bind-key - select-layout even-vertical

# bind-key S swap-pane -D       # swap current pane with the next one
bind-key up swap-pane -U       # swap current pane with the previous one
bind-key down swap-pane -D       # swap current pane with the previous one
bind-key r swap-pane -U       # rotate pane

bind-key p paste-buffer -p # paste from the top paste buffer
bind-key b choose-buffer # choose which buffer to paste from

bind-key B break-pane
bind-key b copy-mode

# TODO: background run
bind-key t move-pane -t bg
bind-key J display-message "take pane"\; choose-window 'join-pane -v -s "%%"'
# bind-key J join-pane -t:{last} # send pane to last window

bind-key R source-file ${HOME}/.tmux.conf \; display-message "tmux reloaded"

# set esc to exit from copy-mode-vi # tmux list-keys | grep "send-keys -X cancel"
bind-key -T copy-mode-vi Escape send-keys -X stop-selection
bind-key -T copy-mode-vi q send-keys -X stop-selection


unbind-key -T copy-mode-vi Space

unbind-key -T copy-mode-vi v
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send -X begin-selection \; send -X rectangle-toggle
# bind-key -T copy-mode-vi y send-keys -X copy-selection-no-clear
# bind-key -T copy-mode-vi y send-keys -X copy-selection; send-keys -X stop-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi q send-keys -X copy-selection

# TODO:
# bind-key -T copy-mode-vi x run-shell "cd #{pane_current_path}; nvr-open #{copy_cursor_word}"

bind-key Space split-window -c "#{pane_current_path}" -p 25 # create small pane below
bind-key c new-window -c "#{pane_current_path}"
bind-key '"' split-window -c "#{pane_current_path}"
# bind-key 's' split-window -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"
# bind-key 'v' split-window -h -c "#{pane_current_path}"

bind-key C-b setw synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# search reverse order
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

# Section: plugins

# set -g @plugin 'pschmitt/tmux-ssh-split'
# https://github.com/pschmitt/tmux-ssh-split
# set-option -g @ssh-split-keep-cwd "true"
# set-option -g @ssh-split-fail "false"
# set-option -g @ssh-split-no-shell "true"
# set-option -g @ssh-split-strip-cmd "true"
# set-option -g @ssh-split-verbose "false"
# set-option -g @ssh-split-h-key "h"
# set-option -g @ssh-split-v-key 'v'

run ~/.tmux/plugins/tmux-remote/remote.tmux
# run ~/.tmux/plugins/tmux-open/open.tmux

# TODO: Replace with OSC52
# run ~/.tmux/plugins/tmux-yank/yank.tmux

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Section: view
set -g status-left ''
# set -g status-right '#(cd "#{pane_current_path}" && git rev-parse --abbrev-ref HEAD | xargs -I{} echo " "Ôêò {}" "#[fg=#696969,bg=#000000] || echo "") %m/%d %A %I:%M'
set -g status-bg "#000000"
set -g status-fg "#696969"
set -g status on
# set -g status-bg "#ffa500"
# set -g status-bg "white"
# set -g status 2
set -g status-justify left
set -g status-left-length 250
set -g status-right-length 250
# set -g aggressive-resize on
set -g bell-action none

# set -g automatic-rename-format '#(cd "#{pane_current_path}" && echo $(basename $(dirname $(pwd)))/$(basename $(pwd)))'
# set -g automatic-rename-format "#(basename #{pane_current_path})"
set -g automatic-rename-format "#(basename #{pane_path})"

# set -g pane-border-status bottom
set -g pane-border-status off
# set -g window-status-style 'fg=#000000'

# set -g pane-border-style 'fg=colour237,dim'
# set -g pane-active-border-style 'fg=colour237,dim'
set -g pane-border-style 'fg=#1C3333'
set -g pane-active-border-style 'fg=#1C3333'

# Section: settings


set -g set-clipboard on

%if "[ -f ~/bin/elvish ]" 
set -g default-command ~/bin/elvish 
%elif "[ -f /usr/bin/elvish ]"
set -g default-command /usr/bin/elvish
%elif "[ -f /usr/local/bin/elvish ]"
set -g default-command /usr/local/bin/elvish
%elif "[ -f /usr/local/bin/fish ]" 
set -g default-command /usr/local/bin/fish
%endif

set -g default-shell /bin/sh

set-environment -g SHLVL 0 # Shell Level start from 1
set -g mouse off
set -g status-position top
set -g history-limit 100000
set -g pane-base-index 1

set -g focus-events on
set -g renumber-windows on
# set -s copy-command 'xsel -i'
set -g status-interval 2
set -sg escape-time 0 # Don't wait for an escape sequence after seeing C-Space. https://github.com/tmux/tmux/issues/353#issuecomment-294570322
set -g wrap-search off # Don't wrap searches

# set -g visual-activity off
# set -g visual-bell off
# set -g visual-silence on
# }}}


# Section: vim
#
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="children=(); i=0; pids=( $(ps -o pid= -t '#{pane_tty}') ); \
while read -r c p; do [[ -n c && c -ne p && p -ne 0 ]] && children[p]+=\" $\{c\}\"; done <<< \"$(ps -Ao pid=,ppid=)\"; \
while (( $\{#pids[@]\} > i )); do pid=$\{pids[i++]\}; pids+=( $\{children[pid]-\} ); done; \
ps -o state=,comm= -p \"$\{pids[@]\}\" | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell -b "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell -b "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell -b "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell -b "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }
# bind -n C-h if-shell -F "#{==:#{pane_current_command},nvim}" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell -F "#{==:#{pane_current_command},nvim}" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell -F "#{==:#{pane_current_command},nvim}" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell -F "#{==:#{pane_current_command},nvim}" "send-keys C-l" "select-pane -R"

bind -T copy-mode-vi C-h "select-pane -L"
bind -T copy-mode-vi C-j "select-pane -D"
bind -T copy-mode-vi C-k "select-pane -U"
bind -T copy-mode-vi C-l "select-pane -R"

bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "resize-pane -L 7"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "resize-pane -D 7"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "resize-pane -U 7"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "resize-pane -R 7"
# bind-key -n M-h if-shell -F "#{==:#{pane_current_command},nvim}" "send-keys M-h" "resize-pane -L 5"
# bind-key -n M-j if-shell -F "#{==:#{pane_current_command},nvim}" "send-keys M-j" "resize-pane -D 5"
# bind-key -n M-k if-shell -F "#{==:#{pane_current_command},nvim}" "send-keys M-k" "resize-pane -U 5"
# bind-key -n M-l if-shell -F "#{==:#{pane_current_command},nvim}" "send-keys M-l" "resize-pane -R 5"

bind-key -T copy-mode-vi M-h resize-pane -L 7
bind-key -T copy-mode-vi M-j resize-pane -D 7
bind-key -T copy-mode-vi M-k resize-pane -U 7
bind-key -T copy-mode-vi M-l resize-pane -R 7

set-option -g @ssh-split-v-key "v"
# set -g @plugin 'pschmitt/tmux-ssh-split'
run ~/.tmux/plugins/tmux-ssh-split/ssh-split.tmux

set -as terminal-features ",osc7"

# Tc enables true color
# https://github.com/tmux/tmux/wiki/FAQ#how-do-i-use-rgb-colour
# set -as terminal-overrides ",*:Tc"
# set -g default-terminal "tmux-256color"
set -as terminal-features ",*:RGB"
