# vim:set et sw=2 foldmethod=expr foldexpr=getline(v\:lnum)=~'Section\:'?'>1'\:'=':
#
# TMUX Configuration

# Section: default

# install tpm automatically, https://github.com/tmux-plugins/tpm/blob/master/docs/automatic_tpm_installation.md
# if "test ! -d ~/.tmux/plugins/tpm" "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

if-shell '[[ -f /usr/bin/fish ]]' "set -g default-shell /usr/bin/fish"
if-shell '[[ -f /usr/local/bin/fish ]]' "set -g default-shell /usr/local/bin/fish"

if-shell '[[ $USER == "rok" ]]' 'set -g default-terminal "xterm-256color"'
if-shell '[[ $USER != "rok" ]]' 'set -g default-terminal "xterm"'
if-shell '[[ $USER == "rok" ]]' 'set -ga terminal-overrides ",*256col*:Tc"'

set-environment -g "LC_ALL" "en_US.UTF-8"


# Section: keys
unbind-key C-b
set -g prefix C-Space
set -g mode-keys vi

# move with <;>,<'>
bind-key -r "'" next-window
bind-key -r \; previous-window

# zen(only)
# bind-key o set status\; resize-pane -Z \;
bind-key -n C-z resize-pane -Z \;
# toggle status
# bind-key z set status\; resize-pane -Z\;

bind-key BSpace last-window
# bind-key Tab last-pane

bind-key x kill-pane # kill
# bind-key -n C-x kill-pane # kill
bind-key X kill-window
# bind-key = select-layout even-horizontal
# bind-key - select-layout even-vertical

# bind-key S swap-pane -D       # swap current pane with the next one
bind-key up swap-pane -U       # swap current pane with the previous one
bind-key down swap-pane -D       # swap current pane with the previous one
bind-key r swap-pane -U       # rotate pane

bind-key p paste-buffer  # paste from the top paste buffer
bind-key b choose-buffer # choose which buffer to paste from

bind-key B break-pane
bind-key t move-pane -t bg
bind-key J display-message "take pane"\; choose-window 'join-pane -v -s "%%"'
# bind-key J join-pane -t:{last} # send pane to last window


bind-key R source-file ${HOME}/.tmux.conf \; display-message "tmux reloaded"

# bind-key -t vi-copy 'C-v' rectangle-toggle

# set esc to exit from copy-mode-vi # tmux list-keys | grep "send-keys -X cancel"
bind-key -T copy-mode-vi Escape send-keys -X stop-selection
bind-key -T copy-mode-vi q send-keys -X stop-selection

# Make double and triple click work outside of copy mode (already works inside it with default bindings).
# bind-key -T root DoubleClick1Pane if-shell -Ft{mouse} '#{alternate_on}' "send-keys -M" "copy-mode -t{mouse}; send-keys -t{mouse} -X select-word"
# bind-key -T root TripleClick1Pane if-shell -Ft{mouse} '#{alternate_on}' "send-keys -M" "copy-mode -t{mouse}; send-keys -t{mouse} -X select-line"

# bind-key -T edit-mode-vi Up send-keys -X history-up
# bind-key -T edit-mode-vi Down send-keys -X history-down
unbind-key -T copy-mode-vi Space; bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-no-clear
bind-key -T copy-mode-vi y send-keys -X copy-selection
# bind-key -T copy-mode-vi y send-keys -X copy-selection

bind-key -T copy-mode-vi o run-shell "cd #{pane_current_path}; nvr-open #{copy_cursor_word}"
bind-key -T copy-mode o run-shell "cd #{pane_current_path}; nvr-open #{copy_cursor_word}"

bind-key Space split-window -c "#{pane_current_path}" -p 25 # create small pane below
bind-key c new-window -c "#{pane_current_path}"
bind-key '"' split-window -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"

bind-key C-b setw synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# search reverse order
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi q send-keys -X copy-selection

# Smart pane resizing with awareness of Vim splits.
# See: https://github.com/RyanMillerC/better-vim-tmux-resizer
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Edit values if you use custom resize_count variables
bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "resize-pane -L 10"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "resize-pane -D 5"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "resize-pane -U 5"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "resize-pane -R 10"

bind-key -T copy-mode-vi M-h resize-pane -L 10
bind-key -T copy-mode-vi M-j resize-pane -D 5
bind-key -T copy-mode-vi M-k resize-pane -U 5
bind-key -T copy-mode-vi M-l resize-pane -R 10

# Section: plugins
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'danyim/tmux-remote'
set -g @remote-toggle-key F12
set -g @plugin 'christoomey/vim-tmux-navigator'

# set -g @plugin 'Morantron/tmux-fingers'

set -g @easy-motion-prefix "`"
set -g @easy-motion-target-keys "asdfghjkl;"
set -g @plugin 'IngoMeyer441/tmux-easy-motion'
set -g @easy-motion-default-motion "bd-w"

# set -g @plugin "roy2220/easyjump.tmux"
# set -g @plugin 'schasse/tmux-jump'
# set -g @jump-key 'j'

set -g @plugin 'tmux-plugins/vim-tmux-focus-events'
set -g @plugin 'laktak/extrakto'
set -g @extrakto_insert_key "enter"
set -g @extrakto_copy_key "tab"
set -g @extrakto_key "f"
set -g @extrakto_split_direction "v"
set -g @extrakto_grab_area "window 50"	

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# # set -g @plugin 'tmux-plugins/tmux-copycat' 
# # prefix + / - regex search (strings work too)
#
# opt.wildoptions='pum'
# print(opt.foldopen)
# # prefix + ctrl-f - simple file search
# # prefix + ctrl-g - jumping over git status files (best used after git status command)
# # prefix + alt-h - jumping over SHA-1/SHA-256 hashes (best used after git log command)
# # prefix + ctrl-u - url search (http, ftp and git urls)
# # prefix + ctrl-d - number search (mnemonic d, as digit)
# # prefix + alt-i - ip address search
# # ctrl-w or alt-w - if you're using Tmux emacs mode
# # set -g @plugin 'tmux-plugins/tmux-open'
# # o : open
# # C-o : open in $EDITOR
# # S : search
# # set -g @open-S 'https://www.duckduckgo.com/'
# # set -g @plugin 'tmux-plugins/tmux-resurrect'
# # set -g @plugin 'tmux-plugins/tmux-continuum'
# # set -g @continuum-restore 'on'
# # set -g @continuum-save-interval '0'
# # set -g @plugin 'tmux-plugins/tmux-battery'
# opt.inccommand='split'
# # set -g @plugin 'tmux-plugins/tmux-sensible'
# opt.pumblend=

set -g @plugin 'tmux-plugins/tpm'
run '~/.tmux/plugins/tpm/tpm'

# Section: view
# set -g status-right '#(tmux.status)'
# set -g status-left '#[fg=colour240]#S'
set -g status-left '#[fg=colour240]#S #(tmux.status)'
set -g status-right ' | #[fg=colour242]#(TZ="Etc/GMT" date "+%%H:%%M %%Z") [%a %b %d #(date "+%%H:%%M %%Z")] '


# set -g bell-action none
set -g status on
# set -g status off
set -g status-justify right
# set -g status-justify centre
# set -g status-style 'fg=colour247, italics, dim'
set -g status-style 'dim,italics'
set -g status-left-length 250
set -g status-right-length 250
setw -g aggressive-resize on

# https://stackoverflow.com/questions/28376611/how-to-automatically-rename-tmux-windows-to-the-current-directory
set -g window-status-current-format '#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'
set -g window-status-format '#I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'
# set -g pane-border-format '#[align=right]#{pane_id}:#(pwd="#{pane_current_path}"; echo ${pwd####*/})'
# set -g pane-border-status top
set -g pane-border-status off
# set -g window-status-bell-style fg=yellow,bold,underscore
set -g window-status-current-style 'bold'

# set -g pane-border-lines simple
# set -g pane-border-style 'bg=default,fg=colour234'
# set -g pane-active-border-style 'bg=default,fg=colour234'
# set -g pane-border-style 'bg=default,fg=colour237'
# set -g pane-active-border-style 'bg=default,fg=colour237'
set -g pane-border-style 'fg=colour237'
set -g pane-active-border-style 'fg=colour237'


# Section: settings
# set-environment -g SHLVL 0 # Shell Level start from 1
# set -g remain-on-exit off
set -g mouse on
set -g status-position bottom
set -g status-bg "#1d1f21"
set -g history-limit 100000
set -g pane-base-index 1


set -g focus-events on
set -g renumber-windows on
set -g set-clipboard on
set -g status-interval 30
set -s escape-time 0 # Don't wait for an escape sequence after seeing C-Space.
# set -s escape-time 10 # https://github.com/tmux/tmux/issues/353#issuecomment-294570322
set -g wrap-search off # Don't wrap searches

# set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
# set-hook -g 'after-kill-pane'    'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
# set-hook -g 'pane-exited'        'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
# set-hook -g 'after-split-window' 'run-shell -b "if [ \#{window_panes} -gt 1 ]; then tmux set pane-border-status bottom; fi"'
# set-hook -g 'session-window-changed' 'run-shell -b "tmux set status on; sleep 2; tmux set status off"'
