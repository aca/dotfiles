# vim:set et sw=2 foldmethod=expr foldexpr=getline(v\:lnum)=~'Section\:'?'>1'\:'=':

# mac, set Shell: /usr/local/bin/bash

# https://github.com/tmux/tmux/issues/2716
# set -as terminal-overrides '*:Sync@'

# clipboard
# https://gist.github.com/yudai/95b20e3da66df1b066531997f982b57b
# https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b

# https://github.com/tmux/tmux/wiki/FAQ#why-are-tmux-pane-separators-dashed-rather-than-continuous-lines
# set -as terminal-overrides ",*:U8=0"

# Section: keys
unbind-key C-b
set -g prefix C-Space
set -g mode-keys vi

# move with <;>,<'>
bind-key -r "'" next-window
bind-key -r \; previous-window

# zen(only)
# bind-key o set status\; resize-pane -Z \;
# bind-key -n C-z resize-pane -Z \;
# toggle status
# bind-key z set status\; resize-pane -Z\;

bind-key BSpace last-window
# bind-key Tab last-pane

bind-key x kill-pane # kill
# bind-key -n C-x kill-pane # kill
bind-key X kill-window
# bind-key = select-layout even-horizontal
# bind-key - select-layout even-vertical

# bind-key S swap-pane -D       # swap current pane with the next one
bind-key up swap-pane -U       # swap current pane with the previous one
bind-key down swap-pane -D       # swap current pane with the previous one
bind-key r swap-pane -U       # rotate pane

bind-key p paste-buffer -p # paste from the top paste buffer
bind-key b choose-buffer # choose which buffer to paste from

bind-key B break-pane
bind-key t move-pane -t bg
bind-key J display-message "take pane"\; choose-window 'join-pane -v -s "%%"'
# bind-key J join-pane -t:{last} # send pane to last window

bind-key R source-file ${HOME}/.tmux.conf \; display-message "tmux reloaded"

# set esc to exit from copy-mode-vi # tmux list-keys | grep "send-keys -X cancel"
bind-key -T copy-mode-vi Escape send-keys -X stop-selection
bind-key -T copy-mode-vi q send-keys -X stop-selection

# Make double and triple click work outside of copy mode (already works inside it with default bindings).
# bind-key -T root DoubleClick1Pane if-shell -Ft{mouse} '#{alternate_on}' "send-keys -M" "copy-mode -t{mouse}; send-keys -t{mouse} -X select-word"
# bind-key -T root TripleClick1Pane if-shell -Ft{mouse} '#{alternate_on}' "send-keys -M" "copy-mode -t{mouse}; send-keys -t{mouse} -X select-line"

# bind-key -T edit-mode-vi Up send-keys -X history-up
# bind-key -T edit-mode-vi Down send-keys -X history-down
unbind-key -T copy-mode-vi Space

unbind-key -T copy-mode-vi v 
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-on
bind-key -T copy-mode-vi y send-keys -X copy-selection
# bind-key -T copy-mode-vi y send-keys -X copy-selection-no-clear

bind-key -T copy-mode-vi x run-shell "cd #{pane_current_path}; nvr-open #{copy_cursor_word}"

bind-key Space split-window -c "#{pane_current_path}" -p 25 # create small pane below
bind-key c new-window -c "#{pane_current_path}"
bind-key '"' split-window -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"

bind-key C-b setw synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# search reverse order
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi q send-keys -X copy-selection

# Smart pane resizing with awareness of Vim splits.
# See: https://github.com/RyanMillerC/better-vim-tmux-resizer
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# is_vim="ps -o state=,tty=,comm= | grep -iqE '^[^TXZ ]+ +#{s|/dev/||:pane_tty}\s+(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
#
# # Edit values if you use custom resize_count variables
# bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "resize-pane -L 10"
# bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "resize-pane -D 5"
# bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "resize-pane -U 5"
# bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "resize-pane -R 10"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

bind-key -T copy-mode-vi M-h resize-pane -L 10
bind-key -T copy-mode-vi M-j resize-pane -D 5
bind-key -T copy-mode-vi M-k resize-pane -U 5
bind-key -T copy-mode-vi M-l resize-pane -R 10

# Section: plugins

# Disabled
# set -g @plugin 'pschmitt/tmux-ssh-split'
# set -g @plugin 'Morantron/tmux-fingers'

# https://github.com/pschmitt/tmux-ssh-split
set-option -g @ssh-split-keep-cwd "true"
set-option -g @ssh-split-fail "false"
set-option -g @ssh-split-no-shell "true"
set-option -g @ssh-split-strip-cmd "true"
set-option -g @ssh-split-verbose "false"
set-option -g @ssh-split-h-key "h"
set-option -g @ssh-split-v-key 'v'

# set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'danyim/tmux-remote'
# set -g @plugin 'aca/vim-tmux-navigator'
# set -g @plugin 'laktak/extrakto'
set -g @extrakto_insert_key "enter"
set -g @extrakto_copy_key "tab"
set -g @extrakto_key "f"
set -g @extrakto_split_direction "v"
set -g @extrakto_grab_area "window 50"	

# set -g @plugin 'tmux-plugins/tpm'
# run '~/.tmux/plugins/tpm/tpm'

# run ~/.tmux/plugins/extrakto/extrakto.tmux
# run ~/.tmux/plugins/tmux-remote/remote.tmux
run ~/.tmux/plugins/tmux-yank/yank.tmux
# run ~/.tmux/plugins/vim-tmux-navigator/vim-tmux-navigator.tmux

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

is_vim="ps -o state=,tty=,comm= | grep -iqE '^[^TXZ ]+ +#{s|/dev/||:pane_tty}\s+(\\S+\\/)?g?(view|nvim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 5'
bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 5'
bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 5'
bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 5'

bind-key -T copy-mode-vi M-h resize-pane -L 5
bind-key -T copy-mode-vi M-j resize-pane -D 5
bind-key -T copy-mode-vi M-k resize-pane -U 5
bind-key -T copy-mode-vi M-l resize-pane -R 5

# Section: view

set -g status-left '#h #[fg=red]#S#[fg=default]'
set -g status-right " %H:%M %d-%b-%y "
# set -g status-format[1] '#[align=right]#(kube.tmux) | #(cd "#{pane_current_path}" && tmux.gitbranch)'
# set -g status 2
set -g status-justify right
set -g status-style 'dim'
set -g status-left-length 250
set -g status-right-length 250
set -g aggressive-resize on
set -g bell-action none

# https://stackoverflow.com/questions/28376611/how-to-automatically-rename-tmux-windows-to-the-current-directory
# set -g window-status-current-format '#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'
# set -g window-status-format '#I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'
set -g automatic-rename-format '#{b:pane_current_path}'
# set -g pane-border-status top
set -g pane-border-status off
# set -g window-status-bell-style fg=yellow,bold,underscore
set -g window-status-current-style 'bold'

# set -g pane-border-lines simple
# set -g pane-border-style 'bg=default,fg=colour234'
# set -g pane-active-border-style 'bg=default,fg=colour234'
# set -g pane-border-style 'bg=default,fg=colour237'
# set -g pane-active-border-style 'bg=default,fg=colour237'
set -g pane-border-style 'fg=colour237'
set -g pane-active-border-style 'fg=colour237'


# Section: settings

# Tc enables true color
set -ag terminal-overrides ",*256col*:colors=256:Tc"

# OSC 52
# set -ag terminal-overrides "vte*:XT:Ms=\\E]52;c;%p2%s\\7,xterm*:XT:Ms=\\E]52;c;%p2%s\\7"

# https://github.com/tmux/tmux/wiki/FAQ#how-do-i-use-rgb-colour
set -g default-terminal "screen-256color"
# set -g default-terminal "xterm-color"
if-shell '[[ $USER == "ubuntu" ]]' 'set -g default-terminal "xterm-color"'
# set -g default-command 'fish'
# if-shell '[[ -f /usr/bin/fish ]]' "set -g default-shell /usr/bin/fish"
# if-shell '[[ -f /usr/local/bin/fish ]]' "set -g default-shell /usr/local/bin/fish"
# set -g default-shell '/bin/bash'

# set-environment -g SHLVL 0 # Shell Level start from 1
# set -g remain-on-exit off
set -g mouse on
set -g status-position top
# set -g status-bg "#2E313D"
# set -g status-bg "#0c1012"
# set -g status-bg "#ffa500"
# set -g status-bg "white"
set -g history-limit 100000
set -g pane-base-index 1

set -g focus-events on
set -g renumber-windows on
set -g set-clipboard on
set -g status-interval 20
set -sg escape-time 0 # Don't wait for an escape sequence after seeing C-Space.
# set -s escape-time 10 # https://github.com/tmux/tmux/issues/353#issuecomment-294570322
set -g wrap-search off # Don't wrap searches
